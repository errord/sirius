; ModuleID = 'moduletree.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"
target triple = "x86_64-unknown-linux-gnu"
	%struct.modulenode_t = type { [1024 x i8], i32, %struct.wordgroup_t*, void (%struct.modulenode_t*)*, %struct.modulenode_t**, i32, %struct.modulenode_t**, i32, %struct.modulenode_t* }
	%struct.moduletree_t = type { %struct.modulenode_t*, %struct.modulenode_t*, %struct.wordgroup_t*, %struct.wordgroup_t* }
	%struct.wordgroup_t = type { }
@.str = internal constant [12 x i8] c"head_module\00"		; <[12 x i8]*> [#uses=1]

define %struct.modulenode_t* @mnode_new(i8* %modname, i32 %mntype, void (%struct.modulenode_t*)* %process) nounwind {
entry:
	%modname_addr = alloca i8*		; <i8**> [#uses=2]
	%mntype_addr = alloca i32		; <i32*> [#uses=2]
	%process_addr = alloca void (%struct.modulenode_t*)*		; <void (%struct.modulenode_t*)**> [#uses=2]
	%retval = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%mnode = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=11]
	%0 = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store i8* %modname, i8** %modname_addr
	store i32 %mntype, i32* %mntype_addr
	store void (%struct.modulenode_t*)* %process, void (%struct.modulenode_t*)** %process_addr
	%1 = call noalias i8* @malloc(i64 1088) nounwind		; <i8*> [#uses=1]
	%2 = bitcast i8* %1 to %struct.modulenode_t*		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %2, %struct.modulenode_t** %mnode, align 8
	%3 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = getelementptr %struct.modulenode_t* %3, i32 0, i32 0		; <[1024 x i8]*> [#uses=1]
	%5 = getelementptr [1024 x i8]* %4, i64 0, i64 0		; <i8*> [#uses=1]
	%6 = load i8** %modname_addr, align 8		; <i8*> [#uses=1]
	%7 = call i8* @strncpy(i8* noalias %5, i8* noalias %6, i64 1024) nounwind		; <i8*> [#uses=0]
	%8 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%9 = getelementptr %struct.modulenode_t* %8, i32 0, i32 1		; <i32*> [#uses=1]
	%10 = load i32* %mntype_addr, align 4		; <i32> [#uses=1]
	store i32 %10, i32* %9, align 8
	%11 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%12 = getelementptr %struct.modulenode_t* %11, i32 0, i32 3		; <void (%struct.modulenode_t*)**> [#uses=1]
	%13 = load void (%struct.modulenode_t*)** %process_addr, align 8		; <void (%struct.modulenode_t*)*> [#uses=1]
	store void (%struct.modulenode_t*)* %13, void (%struct.modulenode_t*)** %12, align 8
	%14 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%15 = getelementptr %struct.modulenode_t* %14, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	store %struct.wordgroup_t* null, %struct.wordgroup_t** %15, align 8
	%16 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%17 = getelementptr %struct.modulenode_t* %16, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	store %struct.modulenode_t** null, %struct.modulenode_t*** %17, align 8
	%18 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%19 = getelementptr %struct.modulenode_t* %18, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	store %struct.modulenode_t** null, %struct.modulenode_t*** %19, align 8
	%20 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%21 = getelementptr %struct.modulenode_t* %20, i32 0, i32 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t* null, %struct.modulenode_t** %21, align 8
	%22 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%23 = getelementptr %struct.modulenode_t* %22, i32 0, i32 5		; <i32*> [#uses=1]
	store i32 0, i32* %23, align 8
	%24 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	%25 = getelementptr %struct.modulenode_t* %24, i32 0, i32 7		; <i32*> [#uses=1]
	store i32 0, i32* %25, align 8
	%26 = load %struct.modulenode_t** %mnode, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %26, %struct.modulenode_t** %0, align 8
	%27 = load %struct.modulenode_t** %0, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %27, %struct.modulenode_t** %retval, align 8
	br label %return

return:		; preds = %entry
	%retval1 = load %struct.modulenode_t** %retval		; <%struct.modulenode_t*> [#uses=1]
	ret %struct.modulenode_t* %retval1
}

declare noalias i8* @malloc(i64) nounwind

declare i8* @strncpy(i8* noalias, i8* noalias, i64) nounwind

define internal %struct.modulenode_t** @reallocnodelist(%struct.modulenode_t** %oldptr, i64 %size) nounwind {
entry:
	%oldptr_addr = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=4]
	%size_addr = alloca i64		; <i64*> [#uses=3]
	%retval = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=2]
	%newptr = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=3]
	%i = alloca i32		; <i32*> [#uses=0]
	%0 = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t** %oldptr, %struct.modulenode_t*** %oldptr_addr
	store i64 %size, i64* %size_addr
	%1 = load i64* %size_addr, align 8		; <i64> [#uses=1]
	%2 = mul i64 %1, 8		; <i64> [#uses=1]
	%3 = call noalias i8* @malloc(i64 %2) nounwind		; <i8*> [#uses=1]
	%4 = bitcast i8* %3 to %struct.modulenode_t**		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t** %4, %struct.modulenode_t*** %newptr, align 8
	%5 = load %struct.modulenode_t*** %oldptr_addr, align 8		; <%struct.modulenode_t**> [#uses=1]
	%6 = icmp ne %struct.modulenode_t** %5, null		; <i1> [#uses=1]
	br i1 %6, label %bb, label %bb1

bb:		; preds = %entry
	%7 = load i64* %size_addr, align 8		; <i64> [#uses=1]
	%8 = mul i64 %7, 8		; <i64> [#uses=1]
	%9 = add i64 %8, -8		; <i64> [#uses=1]
	%10 = load %struct.modulenode_t*** %newptr, align 8		; <%struct.modulenode_t**> [#uses=1]
	%11 = load %struct.modulenode_t*** %oldptr_addr, align 8		; <%struct.modulenode_t**> [#uses=1]
	%12 = bitcast %struct.modulenode_t** %10 to i8*		; <i8*> [#uses=1]
	%13 = bitcast %struct.modulenode_t** %11 to i8*		; <i8*> [#uses=1]
	call void @llvm.memcpy.i64(i8* %12, i8* %13, i64 %9, i32 1)
	%14 = load %struct.modulenode_t*** %oldptr_addr, align 8		; <%struct.modulenode_t**> [#uses=1]
	%15 = bitcast %struct.modulenode_t** %14 to i8*		; <i8*> [#uses=1]
	call void @free(i8* %15) nounwind
	br label %bb1

bb1:		; preds = %bb, %entry
	%16 = load %struct.modulenode_t*** %newptr, align 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t** %16, %struct.modulenode_t*** %0, align 8
	%17 = load %struct.modulenode_t*** %0, align 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t** %17, %struct.modulenode_t*** %retval, align 8
	br label %return

return:		; preds = %bb1
	%retval2 = load %struct.modulenode_t*** %retval		; <%struct.modulenode_t**> [#uses=1]
	ret %struct.modulenode_t** %retval2
}

declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind

declare void @free(i8*) nounwind

define void @mnode_link(%struct.modulenode_t* %parent, %struct.modulenode_t* %child) nounwind {
entry:
	%parent_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=9]
	%child_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=9]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %parent, %struct.modulenode_t** %parent_addr
	store %struct.modulenode_t* %child, %struct.modulenode_t** %child_addr
	%0 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 7		; <i32*> [#uses=1]
	%2 = load i32* %1, align 8		; <i32> [#uses=1]
	%3 = add i32 %2, 1		; <i32> [#uses=1]
	%4 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%5 = getelementptr %struct.modulenode_t* %4, i32 0, i32 7		; <i32*> [#uses=1]
	store i32 %3, i32* %5, align 8
	%6 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%7 = getelementptr %struct.modulenode_t* %6, i32 0, i32 5		; <i32*> [#uses=1]
	%8 = load i32* %7, align 8		; <i32> [#uses=1]
	%9 = add i32 %8, 1		; <i32> [#uses=1]
	%10 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%11 = getelementptr %struct.modulenode_t* %10, i32 0, i32 5		; <i32*> [#uses=1]
	store i32 %9, i32* %11, align 8
	%12 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%13 = getelementptr %struct.modulenode_t* %12, i32 0, i32 7		; <i32*> [#uses=1]
	%14 = load i32* %13, align 8		; <i32> [#uses=1]
	%15 = sext i32 %14 to i64		; <i64> [#uses=1]
	%16 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%17 = getelementptr %struct.modulenode_t* %16, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%18 = load %struct.modulenode_t*** %17, align 8		; <%struct.modulenode_t**> [#uses=1]
	%19 = call %struct.modulenode_t** @reallocnodelist(%struct.modulenode_t** %18, i64 %15) nounwind		; <%struct.modulenode_t**> [#uses=1]
	%20 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%21 = getelementptr %struct.modulenode_t* %20, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	store %struct.modulenode_t** %19, %struct.modulenode_t*** %21, align 8
	%22 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%23 = getelementptr %struct.modulenode_t* %22, i32 0, i32 5		; <i32*> [#uses=1]
	%24 = load i32* %23, align 8		; <i32> [#uses=1]
	%25 = sext i32 %24 to i64		; <i64> [#uses=1]
	%26 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%27 = getelementptr %struct.modulenode_t* %26, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%28 = load %struct.modulenode_t*** %27, align 8		; <%struct.modulenode_t**> [#uses=1]
	%29 = call %struct.modulenode_t** @reallocnodelist(%struct.modulenode_t** %28, i64 %25) nounwind		; <%struct.modulenode_t**> [#uses=1]
	%30 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%31 = getelementptr %struct.modulenode_t* %30, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	store %struct.modulenode_t** %29, %struct.modulenode_t*** %31, align 8
	%32 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%33 = getelementptr %struct.modulenode_t* %32, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%34 = load %struct.modulenode_t*** %33, align 8		; <%struct.modulenode_t**> [#uses=1]
	%35 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%36 = getelementptr %struct.modulenode_t* %35, i32 0, i32 7		; <i32*> [#uses=1]
	%37 = load i32* %36, align 8		; <i32> [#uses=1]
	%38 = sub i32 %37, 1		; <i32> [#uses=1]
	%39 = sext i32 %38 to i64		; <i64> [#uses=1]
	%40 = getelementptr %struct.modulenode_t** %34, i64 %39		; <%struct.modulenode_t**> [#uses=1]
	%41 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %41, %struct.modulenode_t** %40, align 1
	%42 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%43 = getelementptr %struct.modulenode_t* %42, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%44 = load %struct.modulenode_t*** %43, align 8		; <%struct.modulenode_t**> [#uses=1]
	%45 = load %struct.modulenode_t** %child_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%46 = getelementptr %struct.modulenode_t* %45, i32 0, i32 5		; <i32*> [#uses=1]
	%47 = load i32* %46, align 8		; <i32> [#uses=1]
	%48 = sub i32 %47, 1		; <i32> [#uses=1]
	%49 = sext i32 %48 to i64		; <i64> [#uses=1]
	%50 = getelementptr %struct.modulenode_t** %44, i64 %49		; <%struct.modulenode_t**> [#uses=1]
	%51 = load %struct.modulenode_t** %parent_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %51, %struct.modulenode_t** %50, align 1
	br label %return

return:		; preds = %entry
	ret void
}

define void @mnode_free(%struct.modulenode_t* %node) nounwind {
entry:
	%node_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=7]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %node, %struct.modulenode_t** %node_addr
	%0 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%2 = load %struct.wordgroup_t** %1, align 8		; <%struct.wordgroup_t*> [#uses=1]
	call void @wg_free(%struct.wordgroup_t* %2) nounwind
	%3 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = getelementptr %struct.modulenode_t* %3, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%5 = load %struct.modulenode_t*** %4, align 8		; <%struct.modulenode_t**> [#uses=1]
	%6 = icmp ne %struct.modulenode_t** %5, null		; <i1> [#uses=1]
	br i1 %6, label %bb, label %bb1

bb:		; preds = %entry
	%7 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%8 = getelementptr %struct.modulenode_t* %7, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%9 = load %struct.modulenode_t*** %8, align 8		; <%struct.modulenode_t**> [#uses=1]
	%10 = bitcast %struct.modulenode_t** %9 to i8*		; <i8*> [#uses=1]
	call void @free(i8* %10) nounwind
	br label %bb1

bb1:		; preds = %bb, %entry
	%11 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%12 = getelementptr %struct.modulenode_t* %11, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%13 = load %struct.modulenode_t*** %12, align 8		; <%struct.modulenode_t**> [#uses=1]
	%14 = icmp ne %struct.modulenode_t** %13, null		; <i1> [#uses=1]
	br i1 %14, label %bb2, label %bb3

bb2:		; preds = %bb1
	%15 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%16 = getelementptr %struct.modulenode_t* %15, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%17 = load %struct.modulenode_t*** %16, align 8		; <%struct.modulenode_t**> [#uses=1]
	%18 = bitcast %struct.modulenode_t** %17 to i8*		; <i8*> [#uses=1]
	call void @free(i8* %18) nounwind
	br label %bb3

bb3:		; preds = %bb2, %bb1
	%19 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%20 = bitcast %struct.modulenode_t* %19 to i8*		; <i8*> [#uses=1]
	call void @free(i8* %20) nounwind
	br label %return

return:		; preds = %bb3
	ret void
}

declare void @wg_free(%struct.wordgroup_t*)

define %struct.wordgroup_t* @monde_input(%struct.modulenode_t* %node, i32 %idx) nounwind {
entry:
	%node_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=4]
	%idx_addr = alloca i32		; <i32*> [#uses=3]
	%retval = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=2]
	%0 = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %node, %struct.modulenode_t** %node_addr
	store i32 %idx, i32* %idx_addr
	%1 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%2 = getelementptr %struct.modulenode_t* %1, i32 0, i32 5		; <i32*> [#uses=1]
	%3 = load i32* %2, align 8		; <i32> [#uses=1]
	%4 = icmp eq i32 %3, 0		; <i1> [#uses=1]
	br i1 %4, label %bb1, label %bb

bb:		; preds = %entry
	%5 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%6 = getelementptr %struct.modulenode_t* %5, i32 0, i32 5		; <i32*> [#uses=1]
	%7 = load i32* %6, align 8		; <i32> [#uses=1]
	%8 = load i32* %idx_addr, align 4		; <i32> [#uses=1]
	%9 = icmp sge i32 %7, %8		; <i1> [#uses=1]
	br i1 %9, label %bb1, label %bb2

bb1:		; preds = %bb, %entry
	store %struct.wordgroup_t* null, %struct.wordgroup_t** %0, align 8
	br label %bb3

bb2:		; preds = %bb
	%10 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%11 = getelementptr %struct.modulenode_t* %10, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%12 = load %struct.modulenode_t*** %11, align 8		; <%struct.modulenode_t**> [#uses=1]
	%13 = load i32* %idx_addr, align 4		; <i32> [#uses=1]
	%14 = sext i32 %13 to i64		; <i64> [#uses=1]
	%15 = getelementptr %struct.modulenode_t** %12, i64 %14		; <%struct.modulenode_t**> [#uses=1]
	%16 = load %struct.modulenode_t** %15, align 1		; <%struct.modulenode_t*> [#uses=1]
	%17 = getelementptr %struct.modulenode_t* %16, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%18 = load %struct.wordgroup_t** %17, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %18, %struct.wordgroup_t** %0, align 8
	br label %bb3

bb3:		; preds = %bb2, %bb1
	%19 = load %struct.wordgroup_t** %0, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %19, %struct.wordgroup_t** %retval, align 8
	br label %return

return:		; preds = %bb3
	%retval4 = load %struct.wordgroup_t** %retval		; <%struct.wordgroup_t*> [#uses=1]
	ret %struct.wordgroup_t* %retval4
}

define void @mnode_out(%struct.modulenode_t* %node, %struct.wordgroup_t* %out) nounwind {
entry:
	%node_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%out_addr = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %node, %struct.modulenode_t** %node_addr
	store %struct.wordgroup_t* %out, %struct.wordgroup_t** %out_addr
	%0 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%2 = load %struct.wordgroup_t** %out_addr, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %2, %struct.wordgroup_t** %1, align 8
	br label %return

return:		; preds = %entry
	ret void
}

define %struct.moduletree_t* @modtree_new() nounwind {
entry:
	%retval = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%modtree = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=6]
	%0 = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	%1 = call noalias i8* @malloc(i64 32) nounwind		; <i8*> [#uses=1]
	%2 = bitcast i8* %1 to %struct.moduletree_t*		; <%struct.moduletree_t*> [#uses=1]
	store %struct.moduletree_t* %2, %struct.moduletree_t** %modtree, align 8
	%3 = load %struct.moduletree_t** %modtree, align 8		; <%struct.moduletree_t*> [#uses=1]
	%4 = getelementptr %struct.moduletree_t* %3, i32 0, i32 0		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t* null, %struct.modulenode_t** %4, align 8
	%5 = load %struct.moduletree_t** %modtree, align 8		; <%struct.moduletree_t*> [#uses=1]
	%6 = getelementptr %struct.moduletree_t* %5, i32 0, i32 1		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t* null, %struct.modulenode_t** %6, align 8
	%7 = load %struct.moduletree_t** %modtree, align 8		; <%struct.moduletree_t*> [#uses=1]
	%8 = getelementptr %struct.moduletree_t* %7, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	store %struct.wordgroup_t* null, %struct.wordgroup_t** %8, align 8
	%9 = load %struct.moduletree_t** %modtree, align 8		; <%struct.moduletree_t*> [#uses=1]
	%10 = getelementptr %struct.moduletree_t* %9, i32 0, i32 3		; <%struct.wordgroup_t**> [#uses=1]
	store %struct.wordgroup_t* null, %struct.wordgroup_t** %10, align 8
	%11 = load %struct.moduletree_t** %modtree, align 8		; <%struct.moduletree_t*> [#uses=1]
	store %struct.moduletree_t* %11, %struct.moduletree_t** %0, align 8
	%12 = load %struct.moduletree_t** %0, align 8		; <%struct.moduletree_t*> [#uses=1]
	store %struct.moduletree_t* %12, %struct.moduletree_t** %retval, align 8
	br label %return

return:		; preds = %entry
	%retval1 = load %struct.moduletree_t** %retval		; <%struct.moduletree_t*> [#uses=1]
	ret %struct.moduletree_t* %retval1
}

define void @modtree_free(%struct.moduletree_t* %modtree) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%node = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=5]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	%0 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%1 = getelementptr %struct.moduletree_t* %0, i32 0, i32 1		; <%struct.modulenode_t**> [#uses=1]
	%2 = load %struct.modulenode_t** %1, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %2, %struct.modulenode_t** %node, align 8
	br label %bb1

bb:		; preds = %bb1
	%3 = load %struct.modulenode_t** %node, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = getelementptr %struct.modulenode_t* %3, i32 0, i32 8		; <%struct.modulenode_t**> [#uses=1]
	%5 = load %struct.modulenode_t** %4, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %5, %struct.modulenode_t** %node, align 8
	%6 = load %struct.modulenode_t** %node, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void @mnode_free(%struct.modulenode_t* %6) nounwind
	br label %bb1

bb1:		; preds = %bb, %entry
	%7 = load %struct.modulenode_t** %node, align 8		; <%struct.modulenode_t*> [#uses=1]
	%8 = icmp ne %struct.modulenode_t* %7, null		; <i1> [#uses=1]
	br i1 %8, label %bb, label %bb2

bb2:		; preds = %bb1
	br label %return

return:		; preds = %bb2
	ret void
}

define void @modtree_set_input(%struct.moduletree_t* %modtree, %struct.wordgroup_t* %input) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%input_addr = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	store %struct.wordgroup_t* %input, %struct.wordgroup_t** %input_addr
	%0 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%1 = getelementptr %struct.moduletree_t* %0, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%2 = load %struct.wordgroup_t** %input_addr, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %2, %struct.wordgroup_t** %1, align 8
	br label %return

return:		; preds = %entry
	ret void
}

define %struct.wordgroup_t* @modtree_get_out(%struct.moduletree_t* %modtree) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%retval = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=2]
	%0 = alloca %struct.wordgroup_t*		; <%struct.wordgroup_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	%1 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%2 = getelementptr %struct.moduletree_t* %1, i32 0, i32 3		; <%struct.wordgroup_t**> [#uses=1]
	%3 = load %struct.wordgroup_t** %2, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %3, %struct.wordgroup_t** %0, align 8
	%4 = load %struct.wordgroup_t** %0, align 8		; <%struct.wordgroup_t*> [#uses=1]
	store %struct.wordgroup_t* %4, %struct.wordgroup_t** %retval, align 8
	br label %return

return:		; preds = %entry
	%retval1 = load %struct.wordgroup_t** %retval		; <%struct.wordgroup_t*> [#uses=1]
	ret %struct.wordgroup_t* %retval1
}

define void @modtree_addresource(%struct.moduletree_t* %mtree, %struct.modulenode_t* %node) nounwind {
entry:
	%mtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=3]
	%node_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %mtree, %struct.moduletree_t** %mtree_addr
	store %struct.modulenode_t* %node, %struct.modulenode_t** %node_addr
	%0 = load %struct.moduletree_t** %mtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%1 = getelementptr %struct.moduletree_t* %0, i32 0, i32 1		; <%struct.modulenode_t**> [#uses=1]
	%2 = load %struct.modulenode_t** %1, align 8		; <%struct.modulenode_t*> [#uses=1]
	%3 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = getelementptr %struct.modulenode_t* %3, i32 0, i32 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t* %2, %struct.modulenode_t** %4, align 8
	%5 = load %struct.moduletree_t** %mtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%6 = getelementptr %struct.moduletree_t* %5, i32 0, i32 1		; <%struct.modulenode_t**> [#uses=1]
	%7 = load %struct.modulenode_t** %node_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %7, %struct.modulenode_t** %6, align 8
	br label %return

return:		; preds = %entry
	ret void
}

define internal void @module_process(%struct.modulenode_t* %modnode) nounwind {
entry:
	%modnode_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %modnode, %struct.modulenode_t** %modnode_addr
	%0 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 3		; <void (%struct.modulenode_t*)**> [#uses=1]
	%2 = load void (%struct.modulenode_t*)** %1, align 8		; <void (%struct.modulenode_t*)*> [#uses=1]
	%3 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void %2(%struct.modulenode_t* %3) nounwind
	br label %return

return:		; preds = %entry
	ret void
}

define internal void @filter_process(%struct.modulenode_t* %modnode) nounwind {
entry:
	%modnode_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %modnode, %struct.modulenode_t** %modnode_addr
	%0 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 3		; <void (%struct.modulenode_t*)**> [#uses=1]
	%2 = load void (%struct.modulenode_t*)** %1, align 8		; <void (%struct.modulenode_t*)*> [#uses=1]
	%3 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void %2(%struct.modulenode_t* %3) nounwind
	br label %return

return:		; preds = %entry
	ret void
}

define internal void @merge_process(%struct.modulenode_t* %modnode) nounwind {
entry:
	%modnode_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %modnode, %struct.modulenode_t** %modnode_addr
	%0 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 3		; <void (%struct.modulenode_t*)**> [#uses=1]
	%2 = load void (%struct.modulenode_t*)** %1, align 8		; <void (%struct.modulenode_t*)*> [#uses=1]
	%3 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void %2(%struct.modulenode_t* %3) nounwind
	br label %return

return:		; preds = %entry
	ret void
}

define internal i32 @allset(%struct.modulenode_t* %modnode) nounwind {
entry:
	%modnode_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=3]
	%retval = alloca i32		; <i32*> [#uses=2]
	%i = alloca i32		; <i32*> [#uses=5]
	%ps = alloca i32		; <i32*> [#uses=2]
	%node = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%p = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=2]
	%0 = alloca i32		; <i32*> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %modnode, %struct.modulenode_t** %modnode_addr
	%1 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%2 = getelementptr %struct.modulenode_t* %1, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	%3 = load %struct.modulenode_t*** %2, align 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t** %3, %struct.modulenode_t*** %p, align 8
	%4 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%5 = getelementptr %struct.modulenode_t* %4, i32 0, i32 5		; <i32*> [#uses=1]
	%6 = load i32* %5, align 8		; <i32> [#uses=1]
	store i32 %6, i32* %ps, align 4
	store i32 0, i32* %i, align 4
	br label %bb3

bb:		; preds = %bb3
	%7 = load %struct.modulenode_t*** %p, align 8		; <%struct.modulenode_t**> [#uses=1]
	%8 = load i32* %i, align 4		; <i32> [#uses=1]
	%9 = sext i32 %8 to i64		; <i64> [#uses=1]
	%10 = getelementptr %struct.modulenode_t** %7, i64 %9		; <%struct.modulenode_t**> [#uses=1]
	%11 = load %struct.modulenode_t** %10, align 1		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %11, %struct.modulenode_t** %node, align 8
	%12 = load %struct.modulenode_t** %node, align 8		; <%struct.modulenode_t*> [#uses=1]
	%13 = getelementptr %struct.modulenode_t* %12, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%14 = load %struct.wordgroup_t** %13, align 8		; <%struct.wordgroup_t*> [#uses=1]
	%15 = icmp eq %struct.wordgroup_t* %14, null		; <i1> [#uses=1]
	br i1 %15, label %bb1, label %bb2

bb1:		; preds = %bb
	store i32 0, i32* %0, align 4
	br label %bb5

bb2:		; preds = %bb
	%16 = load i32* %i, align 4		; <i32> [#uses=1]
	%17 = add i32 %16, 1		; <i32> [#uses=1]
	store i32 %17, i32* %i, align 4
	br label %bb3

bb3:		; preds = %bb2, %entry
	%18 = load i32* %i, align 4		; <i32> [#uses=1]
	%19 = load i32* %ps, align 4		; <i32> [#uses=1]
	%20 = icmp slt i32 %18, %19		; <i1> [#uses=1]
	br i1 %20, label %bb, label %bb4

bb4:		; preds = %bb3
	store i32 1, i32* %0, align 4
	br label %bb5

bb5:		; preds = %bb4, %bb1
	%21 = load i32* %0, align 4		; <i32> [#uses=1]
	store i32 %21, i32* %retval, align 4
	br label %return

return:		; preds = %bb5
	%retval6 = load i32* %retval		; <i32> [#uses=1]
	ret i32 %retval6
}

define internal %struct.modulenode_t* @_run(%struct.moduletree_t* %modtree, %struct.modulenode_t* %modnode) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=2]
	%modnode_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=8]
	%retval = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=1]
	%i = alloca i32		; <i32*> [#uses=5]
	%child = alloca %struct.modulenode_t**		; <%struct.modulenode_t***> [#uses=0]
	%next = alloca i32		; <i32*> [#uses=3]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	store %struct.modulenode_t* %modnode, %struct.modulenode_t** %modnode_addr
	store i32 1, i32* %next, align 4
	%0 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 1		; <i32*> [#uses=1]
	%2 = load i32* %1, align 8		; <i32> [#uses=1]
	switch i32 %2, label %bb5 [
		i32 1, label %bb
		i32 2, label %bb
		i32 3, label %bb1
		i32 4, label %bb2
	]

bb:		; preds = %entry, %entry
	%3 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void @module_process(%struct.modulenode_t* %3) nounwind
	br label %bb5

bb1:		; preds = %entry
	%4 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void @filter_process(%struct.modulenode_t* %4) nounwind
	br label %bb5

bb2:		; preds = %entry
	%5 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%6 = call i32 @allset(%struct.modulenode_t* %5) nounwind		; <i32> [#uses=1]
	%7 = icmp eq i32 %6, 0		; <i1> [#uses=1]
	br i1 %7, label %bb3, label %bb4

bb3:		; preds = %bb2
	store i32 0, i32* %next, align 4
	br label %bb5

bb4:		; preds = %bb2
	%8 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void @merge_process(%struct.modulenode_t* %8) nounwind
	br label %bb5

bb5:		; preds = %bb4, %bb3, %bb1, %bb, %entry
	%9 = load i32* %next, align 4		; <i32> [#uses=1]
	%10 = icmp eq i32 %9, 1		; <i1> [#uses=1]
	br i1 %10, label %bb6, label %bb9

bb6:		; preds = %bb5
	store i32 0, i32* %i, align 4
	br label %bb8

bb7:		; preds = %bb8
	%11 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%12 = getelementptr %struct.modulenode_t* %11, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%13 = load %struct.modulenode_t*** %12, align 8		; <%struct.modulenode_t**> [#uses=1]
	%14 = load i32* %i, align 4		; <i32> [#uses=1]
	%15 = sext i32 %14 to i64		; <i64> [#uses=1]
	%16 = getelementptr %struct.modulenode_t** %13, i64 %15		; <%struct.modulenode_t**> [#uses=1]
	%17 = load %struct.modulenode_t** %16, align 1		; <%struct.modulenode_t*> [#uses=1]
	%18 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%19 = call %struct.modulenode_t* @_run(%struct.moduletree_t* %18, %struct.modulenode_t* %17) nounwind		; <%struct.modulenode_t*> [#uses=0]
	%20 = load i32* %i, align 4		; <i32> [#uses=1]
	%21 = add i32 %20, 1		; <i32> [#uses=1]
	store i32 %21, i32* %i, align 4
	br label %bb8

bb8:		; preds = %bb7, %bb6
	%22 = load %struct.modulenode_t** %modnode_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%23 = getelementptr %struct.modulenode_t* %22, i32 0, i32 7		; <i32*> [#uses=1]
	%24 = load i32* %23, align 8		; <i32> [#uses=1]
	%25 = load i32* %i, align 4		; <i32> [#uses=1]
	%26 = icmp sgt i32 %24, %25		; <i1> [#uses=1]
	br i1 %26, label %bb7, label %bb9

bb9:		; preds = %bb8, %bb5
	br label %return

return:		; preds = %bb9
	%retval10 = load %struct.modulenode_t** %retval		; <%struct.modulenode_t*> [#uses=1]
	ret %struct.modulenode_t* %retval10
}

define internal void @_setheadnode(%struct.moduletree_t* %modtree, %struct.modulenode_t* %head) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=3]
	%head_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=8]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	store %struct.modulenode_t* %head, %struct.modulenode_t** %head_addr
	%0 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 0		; <[1024 x i8]*> [#uses=1]
	%2 = getelementptr [1024 x i8]* %1, i64 0, i64 0		; <i8*> [#uses=1]
	call void @llvm.memcpy.i64(i8* %2, i8* getelementptr ([12 x i8]* @.str, i64 0, i64 0), i64 12, i32 1)
	%3 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = getelementptr %struct.modulenode_t* %3, i32 0, i32 1		; <i32*> [#uses=1]
	store i32 1, i32* %4, align 8
	%5 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%6 = getelementptr %struct.modulenode_t* %5, i32 0, i32 3		; <void (%struct.modulenode_t*)**> [#uses=1]
	store void (%struct.modulenode_t*)* null, void (%struct.modulenode_t*)** %6, align 8
	%7 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%8 = getelementptr %struct.modulenode_t* %7, i32 0, i32 4		; <%struct.modulenode_t***> [#uses=1]
	store %struct.modulenode_t** null, %struct.modulenode_t*** %8, align 8
	%9 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%10 = getelementptr %struct.modulenode_t* %9, i32 0, i32 8		; <%struct.modulenode_t**> [#uses=1]
	store %struct.modulenode_t* null, %struct.modulenode_t** %10, align 8
	%11 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%12 = getelementptr %struct.moduletree_t* %11, i32 0, i32 0		; <%struct.modulenode_t**> [#uses=1]
	%13 = load %struct.modulenode_t** %12, align 8		; <%struct.modulenode_t*> [#uses=1]
	%14 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	call void @mnode_link(%struct.modulenode_t* %14, %struct.modulenode_t* %13) nounwind
	%15 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%16 = getelementptr %struct.moduletree_t* %15, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%17 = load %struct.wordgroup_t** %16, align 8		; <%struct.wordgroup_t*> [#uses=1]
	%18 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%19 = getelementptr %struct.modulenode_t* %18, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	store %struct.wordgroup_t* %17, %struct.wordgroup_t** %19, align 8
	br label %return

return:		; preds = %entry
	ret void
}

define internal void @_freeheadnode(%struct.modulenode_t* %head) nounwind {
entry:
	%head_addr = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.modulenode_t* %head, %struct.modulenode_t** %head_addr
	%0 = load %struct.modulenode_t** %head_addr, align 8		; <%struct.modulenode_t*> [#uses=1]
	%1 = getelementptr %struct.modulenode_t* %0, i32 0, i32 6		; <%struct.modulenode_t***> [#uses=1]
	%2 = load %struct.modulenode_t*** %1, align 8		; <%struct.modulenode_t**> [#uses=1]
	%3 = bitcast %struct.modulenode_t** %2 to i8*		; <i8*> [#uses=1]
	call void @free(i8* %3) nounwind
	br label %return

return:		; preds = %entry
	ret void
}

define void @modtree_run(%struct.moduletree_t* %modtree) nounwind {
entry:
	%modtree_addr = alloca %struct.moduletree_t*		; <%struct.moduletree_t**> [#uses=5]
	%tail = alloca %struct.modulenode_t*		; <%struct.modulenode_t**> [#uses=2]
	%head = alloca %struct.modulenode_t		; <%struct.modulenode_t*> [#uses=2]
	%"alloca point" = bitcast i32 0 to i32		; <i32> [#uses=0]
	store %struct.moduletree_t* %modtree, %struct.moduletree_t** %modtree_addr
	%0 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	call void @_setheadnode(%struct.moduletree_t* %0, %struct.modulenode_t* %head) nounwind
	%1 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%2 = getelementptr %struct.moduletree_t* %1, i32 0, i32 0		; <%struct.modulenode_t**> [#uses=1]
	%3 = load %struct.modulenode_t** %2, align 8		; <%struct.modulenode_t*> [#uses=1]
	%4 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%5 = call %struct.modulenode_t* @_run(%struct.moduletree_t* %4, %struct.modulenode_t* %3) nounwind		; <%struct.modulenode_t*> [#uses=1]
	store %struct.modulenode_t* %5, %struct.modulenode_t** %tail, align 8
	call void @_freeheadnode(%struct.modulenode_t* %head) nounwind
	%6 = load %struct.modulenode_t** %tail, align 8		; <%struct.modulenode_t*> [#uses=1]
	%7 = getelementptr %struct.modulenode_t* %6, i32 0, i32 2		; <%struct.wordgroup_t**> [#uses=1]
	%8 = load %struct.wordgroup_t** %7, align 8		; <%struct.wordgroup_t*> [#uses=1]
	%9 = load %struct.moduletree_t** %modtree_addr, align 8		; <%struct.moduletree_t*> [#uses=1]
	%10 = getelementptr %struct.moduletree_t* %9, i32 0, i32 3		; <%struct.wordgroup_t**> [#uses=1]
	store %struct.wordgroup_t* %8, %struct.wordgroup_t** %10, align 8
	br label %return

return:		; preds = %entry
	ret void
}
